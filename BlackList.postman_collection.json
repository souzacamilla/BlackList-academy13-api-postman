{
	"info": {
		"_postman_id": "d7954a8c-3b6b-4008-8907-b8ed7fa7bbd4",
		"name": "BlackListTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38789846"
	},
	"item": [
		{
			"name": "Login QA Coders",
			"item": [
				{
					"name": "Login QA Coders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"tokenUsers\", pm.variables.replaceIn(JSON.parse(responseBody).token));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success Message\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"sysadmin@qacoders.com\",\r\n  \"password\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "login QA Coders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/validateToken",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"validateToken"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste criação de usuario",
			"item": [
				{
					"name": "Criação de Usuário -  Sucesso - 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId\", JSON.parse(responseBody).user._id);\r",
									" \r",
									" \r",
									"pm.sendRequest({\r",
									"\r",
									"    url: `${pm.environment.get(\"url\")}/api/user/${pm.environment.get(\"userId\")}`,\r",
									"\r",
									"    method: 'GET',\r",
									"\r",
									"    header: {\r",
									"\r",
									"        \"Authorization\": `${pm.environment.get(\"tokenUsers\")}`\r",
									"\r",
									"    }\r",
									"\r",
									"}, function (err, response) {\r",
									"\r",
									"    try {\r",
									"\r",
									"        pm.expect(response.json()).exist;\r",
									"\r",
									"        testResult = true;\r",
									"\r",
									"    } catch(error) {\r",
									"\r",
									"        testResult = false;\r",
									"\r",
									"        pm.test(\"Create user\", function () {\r",
									"\r",
									"            pm.expect(true).to.eql(testResult);\r",
									"\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    if (testResult !== false) {\r",
									"\r",
									"        pm.test(\"User created and saved in the database.\", function () {\r",
									"\r",
									"            pm.expect(pm.environment.get(\"userId\")).to.eql(response.json()._id);\r",
									"\r",
									"        });\r",
									"\r",
									"        pm.test(\"Status fullName is true\", function () {\r",
									"\r",
									"            pm.expect(pm.environment.get(\"FullName\")).to.eql(response.json().fullName);\r",
									"\r",
									"        });\r",
									"\r",
									"        pm.test(\"Status email is true\", function () {\r",
									"\r",
									"            pm.expect(pm.environment.get(\"Mail\")).to.eql(response.json().mail);\r",
									"\r",
									"        });\r",
									"\r",
									"        pm.test(\"Status cpf is true\", function () {\r",
									"\r",
									"            pm.expect(pm.environment.get(\"CPF\")).to.eql(response.json().cpf);\r",
									"\r",
									"        });\r",
									"\r",
									"        pm.test(\"Status code is 201\", function () {\r",
									"\r",
									"            pm.response.to.have.status(201);\r",
									"\r",
									"        });\r",
									"\r",
									"\r",
									"    }\r",
									"\r",
									"});\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstName () {\r",
									" \r",
									"    let firstName = [\"Anderson\", \"Maria\", \"Paulo\", \"Joao\", \"Helena\", \"Elisa\", \"Denilson\", \"Flavia\", \"Silvio\", \"Margarida\", \"Joana\", \"Thiago\", \"Ana\", \"Patricia\", \"Lucas\", \"Caio\", \"Lurdes\", \"Cecilia\", \"Michael\"]\r",
									" \r",
									"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"FirstName\", firstName());\r",
									" \r",
									" \r",
									"function lastName () {\r",
									" \r",
									"    let lastName = [\"Alves Almeida\", \"Silva Santos\", \"Ferreia Silva\", \"Lousada Andrade\", \"Pereira Souza\", \"Francisco Francelino\", \"Miranda Oliveira\", \"Martins Leiria\", \"Moureira Ruiz\", \"Florencio Filho\", \"Guimarães França\", \"Loureira\", \"Caetano Lima\", \"Moura\", \"Freitas\", \"Jardins\", \"Alpes\", \"Jackson Dias\"]\r",
									" \r",
									"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"LastName\", lastName());\r",
									" \r",
									"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"));\r",
									" \r",
									"function providerMail () {\r",
									" \r",
									"    let providerMail = [\"@yahoo.com.br\", \"@gmail.com\", \"@bol.com\", \"@aol.com.br\", \"@ig.com.br\", \"@outlook.com\", \"@hotmail.com\"]\r",
									" \r",
									"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"ProviderMail\", providerMail());\r",
									" \r",
									"pm.environment.set(\"Mail\", pm.environment.get(\"FirstName\") + \"_\" + pm.variables.replaceIn('{{$guid}}') + pm.environment.get (\"ProviderMail\"))\r",
									" \r",
									" \r",
									" \r",
									"function generateCPF() {\r",
									"    let num = Math.floor(Math.random() * 999999999);\r",
									"    let cpf = num.toString().padStart(9, '0');\r",
									"    cpf += calcularDigito(cpf);\r",
									"    cpf += calcularDigito(cpf);\r",
									"    return cpf;\r",
									"}\r",
									"function calcularDigito(cpf) {\r",
									"    let soma = 0;\r",
									"    for (let i = 0; i < cpf.length; i++) {\r",
									"        soma += parseInt(cpf[i]) * ((cpf.length + 1) - i);\r",
									"    }\r",
									"    let resto = (soma * 10) % 11;\r",
									"    return (resto > 9) ? '0' : resto.toString();\r",
									"}\r",
									"// Definir a variável no Postman\r",
									"pm.environment.set(\"CPF\", generateCPF());\r",
									" \r",
									"// Função para gerar um ID único de 24 caracteres"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"password\": \"{{Password}}\",\r\n  \"confirmPassword\": \"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de Usuário -  Sem CPF - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: O campo CPF é obrigatório!\", function () {\r",
									"    pm.expect(pm.globals.get(\"O campo CPF é obrigatório!\", pm.response.json()));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Melissa Dias\",\r\n  \"mail\": \"meilissadias@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de Usuário -  CPF  com letras - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: Campo CPF deve conter apenas números\", function () {\r",
									"    pm.expect(pm.globals.get(\"Campo CPF deve conter apenas números\", pm.response.json()));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Melissa Dias\",\r\n  \"mail\": \"melissadias@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"12345asdfgh\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de Usuário -  Sem token - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: No token provided.\", function () {\r",
									"    pm.expect(pm.globals.get(\"No token provided.\", pm.response.json()));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "",
									"type": "string"
								},
								{
									"key": "key",
									"value": "",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Melissa Dias\",\r\n  \"mail\": \"melissadias@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"12522211544\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de Usuário -  Sem campo de confirmação de senha - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: O campo de confirmação de senha é obrigatório.\", function () {\r",
									"    pm.expect(pm.globals.get(\"O campo de confirmação de senha é obrigatório.\", pm.response.json()));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Melissa Dias\",\r\n  \"mail\": \"melissadias@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"12522211544\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de Usuário -  Sem Senha- 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: O campo senha é obrigatório\", function () {\r",
									"    pm.expect(pm.globals.get(\"O campo senha é obrigatório\", pm.response.json()));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"Melissa Dias\",\r\n  \"mail\": \"melissadias@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"12522211544\",\r\n  \"password\": \"\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação de Usuário -  Sem email - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check msg: O campo nome completo é obrigatório.\", function () {\r",
									"    pm.expect(pm.globals.get(\"O campo nome completo é obrigatório.\", pm.response.json()));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"\",\r\n  \"mail\": \"melissadias@test.com.br\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"12341287420\",\r\n  \"password\": \"1234@Test\",\r\n  \"confirmPassword\": \"1234@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste login",
			"item": [
				{
					"name": "Login de Acesso - Sucesso - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed TypeError by adding proper parsing of response body\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success Message\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.exist;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"tokenUsuario\", pm.variables.replaceIn(JSON.parse(responseBody).token));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de Acesso - Senha Inválida- 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: E-mail ou senha informados são inválidos.\", function () {\r",
									"    pm.expect(pm.globals.get(\"E-mail ou senha informados são inválidos.\", pm.response.json()));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"@Test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de Acesso - Email Inválido- 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: E-mail ou senha informados são inválidos.\", function () {\r",
									"    pm.expect(pm.globals.get(\"E-mail ou senha informados são inválidos.\", pm.response.json()));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \".com.br\",\r\n  \"password\": \"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de Acesso - Email em Branco - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed TypeError by adding proper parsing of response body\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: O campo e-mail é obrigatório.\", function () {\r",
									"    pm.expect(pm.globals.get(\"O campo e-mail é obrigatório.\", pm.response.json().EmailRequerid));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"\",\r\n  \"password\": \"{{Password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Login de Acesso - Senha em Branco - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed TypeError by adding proper parsing of response body\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: O campo senha é obrigatório.\", function () {\r",
									"    pm.expect(pm.globals.get(\"O campo senha é obrigatório.\", pm.response.json().SenhaRequerid));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{Mail}}\",\r\n  \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste alteração dados user",
			"item": [
				{
					"name": "Alteração Nome - Sucesso - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed TypeError by adding proper parsing of response body\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success Message\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstName () {\r",
									" \r",
									"    let firstName = [\"Anderson\", \"Maria\", \"Paulo\", \"Joao\", \"Helena\", \"Elisa\", \"Denilson\", \"Flavia\", \"Silvio\", \"Margarida\", \"Joana\", \"Thiago\", \"Ana\", \"Patricia\", \"Lucas\", \"Caio\", \"Lurdes\", \"Cecilia\", \"Michael\"]\r",
									" \r",
									"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"FirstName1\", firstName());\r",
									" \r",
									" \r",
									"function lastName () {\r",
									" \r",
									"    let lastName = [\"Alves Almeida\", \"Silva Santos\", \"Ferreia Silva\", \"Lousada Andrade\", \"Pereira Souza\", \"Francisco Francelino\", \"Miranda Oliveira\", \"Martins Leiria\", \"Moureira Ruiz\", \"Florencio Filho\", \"Guimarães França\", \"Loureira\", \"Caetano Lima\", \"Moura\", \"Freitas\", \"Jardins\", \"Alpes\", \"Jackson Dias\"]\r",
									" \r",
									"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"LastName1\", lastName());\r",
									" \r",
									"pm.environment.set(\"FullName1\", pm.environment.get(\"FirstName1\") + \" \" + pm.environment.get(\"LastName1\"));\r",
									" \r",
									"function providerMail () {\r",
									" \r",
									"    let providerMail = [\"@yahoo.com.br\", \"@gmail.com\", \"@bol.com\", \"@aol.com.br\", \"@ig.com.br\", \"@outlook.com\", \"@hotmail.com\"]\r",
									" \r",
									"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"ProviderMail1\", providerMail());\r",
									" \r",
									"pm.environment.set(\"Mail1\", pm.environment.get(\"FirstName1\") + \"_\" + pm.variables.replaceIn('{{$guid}}') + pm.environment.get (\"ProviderMail1\"))\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsuario}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{FullName1}}\",\r\n  \"mail\": \"{{Mail1}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste lista de Cadastro",
			"item": [
				{
					"name": "Lista de Cadastro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Converter a string JSON para um objeto JavaScript\r",
									"\r",
									"var data = pm.response.json();\r",
									" \r",
									"// Gerar um número aleatório entre 0 e o comprimento da lista de objetos - 1\r",
									"\r",
									"var randomIndex = Math.floor(Math.random() * data.length);\r",
									" \r",
									"// Obter o _id do objeto selecionado aleatoriamente\r",
									"\r",
									"var randomId = data[randomIndex]._id;\r",
									" \r",
									"// Armazenar o _id em uma variável de ambiente\r",
									"\r",
									"pm.environment.set(\"randomId\", randomId);\r",
									" \r",
									"console.log(\"Random ID:\", randomId);\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teste exclusão usuario",
			"item": [
				{
					"name": "Deletar usuário - Sucesso 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed TypeError by adding proper parsing of response body\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success Message\", () => {\r",
									"    pm.expect(pm.response.json().msg).to.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstName () {\r",
									" \r",
									"    let firstName = [\"Anderson\", \"Maria\", \"Paulo\", \"Joao\", \"Helena\", \"Elisa\", \"Denilson\", \"Flavia\", \"Silvio\", \"Margarida\", \"Joana\", \"Thiago\", \"Ana\", \"Patricia\", \"Lucas\", \"Caio\", \"Lurdes\", \"Cecilia\", \"Michael\"]\r",
									" \r",
									"    let randomItem = firstName[Math.floor(Math.random() * firstName.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"FirstName1\", firstName());\r",
									" \r",
									" \r",
									"function lastName () {\r",
									" \r",
									"    let lastName = [\"Alves de Almeida\", \"Silva Santos\", \"Ferreia da Silva\", \"Lousada de Andrade\", \"Pereira Souza\", \"Francisco Francelino\", \"Miranda de Oliveira\", \"Martins de Leiria\", \"Moureira Ruiz\", \"Florencio Filho\", \"Guimarães França\", \"Loureira\", \"Caetano de Lima\", \"Moura\", \"Freitas\", \"Jardins\", \"Alpes\", \"Jackson dos Dias\"]\r",
									" \r",
									"    let randomItem = lastName[Math.floor(Math.random() * lastName.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"LastName1\", lastName());\r",
									" \r",
									"pm.environment.set(\"FullName1\", pm.environment.get(\"FirstName1\") + \" \" + pm.environment.get(\"LastName1\"));\r",
									" \r",
									"function providerMail () {\r",
									" \r",
									"    let providerMail = [\"@yahoo.com.br\", \"@gmail.com\", \"@bol.com\", \"@aol.com.br\", \"@ig.com.br\", \"@outlook.com\", \"@hotmail.com\"]\r",
									" \r",
									"    let randomItem = providerMail[Math.floor(Math.random() * providerMail.length)];\r",
									"    return randomItem\r",
									"}\r",
									" \r",
									"pm.environment.set(\"ProviderMail1\", providerMail());\r",
									" \r",
									"pm.environment.set(\"Mail1\", pm.environment.get(\"FirstName1\") + \"_\" + pm.variables.replaceIn('{{$guid}}') + pm.environment.get (\"ProviderMail1\"))\r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsuario}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/{{randomId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"{{randomId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company",
			"item": [
				{
					"name": "Novo Cadastro de Empresa",
					"item": [
						{
							"name": "Cadastro de empresa - Sucesso - 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: Empresa Cadastrada com Sucesso\", function () {\r",
											"  pm.expect(pm.globals.get(\"Empresa Cadastrada com Sucesso.\", pm.response.json()));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"CompanyuserId\", pm.response.json().newCompany._id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Santos\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastro de Empresa – Nome em duplicidade -400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgEmpresaCadastrada\")).to.eql(JSON.parse(responseBody).alert[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"Empresa de Teste de Software\",\r\n  \"registerCompany\": \"12197896475315\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Foz\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa - Sem nome - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Nome da empresa' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgNameRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Nome com mais de 100 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Nome da empresa' deve ter no máximo 100 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgMax100\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"Antonio Francisco Xavier Frederico Pereira Alves da Silva Santos Oliveira Rodrigues Martins Garcia Junior\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"João Paulo\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem CNPJ - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'CNPJ' da empresa é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCNPJRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"João Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – CNPJ em duplicidade - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: Essa companhia já está cadastrada. Verifique o nome, CNPJ e a razão social da companhia.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCJPJDuplicate\")).to.eql(JSON.parse(responseBody).alert[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"uipuhhhhi8tguuyfvjkl\",\r\n  \"registerCompany\": \"12197896475315\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"João Paulo\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – CNPJ com mais de 14 dígitos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'CNPJ' da empresa deve ter no máximo 14 caracteres numéricos.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgMax14Caracteres\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"12197111896475315\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"João Fernandes\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – CNPJ com letras - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'CNPJ' da empresa deve conter apenas números.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCNPJ\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"uipuhhhhi8tguuyfvjkl\",\r\n  \"registerCompany\": \"abcde896475315\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"João Gabriel\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem Contato Responsável - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Contado do Responsável' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgContactRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Contato Responsável mais de 100 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Contado do Responsável' deve ter no máximo 100 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgMax100Caracteres\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Antonio Francisco Xavier Frederico Pereira Alves da Silva Santos Oliveira Rodrigues Martins Garcia Junior\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem telefone - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Telefone' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgPhoneRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Jose\",\r\n  \"telephone\": \"\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Telefone com letras - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg:O campo 'Telefone' deve conter somente números.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgPhoneLetras\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Felipe\",\r\n  \"telephone\": \"abc97895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Telefone estrangeiro - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg:O campo 'Telefone' deve ter entre 13 e 14 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgPhoneMax14caracteres\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Jose\",\r\n  \"telephone\": \"35193497895419999125\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Telefone menos de 13 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Telefone' deve ter entre 13 e 14 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"O campo 'Telefone' deve ter entre 13 e 14 caracteres.\", pm.response.json()));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Garcia\",\r\n  \"telephone\": \"3519\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem email - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Email' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgEmailRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Felipe\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Email invalido - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Email' informado é inválido. Informe um e-mail no formato [nome@domínio.com].\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgEmailInvalido\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresade.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Fernando\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem descrição - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'Descrição' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgDescripitionRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Garcia\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem logradouro - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'logradouro' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgLogradouroRequerid\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Filipe\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – número com mais de 10 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg:O campo 'número' deve possuir no máximo 10 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgMax10caracteres\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Filipe\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890123\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Campo número com letras - BUG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: 'O campo 'número' só pode conter apenas números.\", function () {\r",
											"    pm.expect(pm.globals.get(\"O campo 'número' só pode conter apenas números.\", pm.response.json()));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"abcde\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Campo número caractere especial - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'número' só pode conter apenas números.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgNumCaractereEspecial\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50@#$%&\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Complemento mais de 80 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'complemento' deve possuir no máximo 80 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgComplementoMax80carac\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar de 4503 ao fim - lado ímpar de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem cidade - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'cidade' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCityRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567890\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Cidade com números - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCityNum\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"123456789\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5123456450\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Cidade mais de 50 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'cidade' deve possuir no máximo 50 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCityMax50Carac\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo São Paulo São Paulo São Paulo São Paulo São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5012345698\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem bairro - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'bairro' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgBairroRequerid\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5012378965\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Bairro mais de 50 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'bairro' deve possuir no máximo 50 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgBairroMax50carac\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores Rua das Flores Rua das Flores Rua das Flores Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567850\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem estado - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed syntax error\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'estado' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgStateRequerid\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5012345678\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Estado com números - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'estado' só pode conter letras maiúsculas\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgStateNum\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"11\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5123456780\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem número - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'número' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgNumeroRequired\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos Avenida  \",\r\n      \"number\": \"\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Estado mais de 2 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'estado' deve possuir 2 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgState2Carac\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SPMG\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5012345067\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem país - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo País é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCountryRequerid\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567850\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – País com números - BUG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg:O campo 'País' só pode conter apenas letras.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgPaisApenasLetras\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5123456780\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"1234567890\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – país mais de 50 caracteres - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo País permite até 50 caracteres.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCountryMax50Carac\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"1234567850\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"BrasilBrasilBrasilBrasilBrasilBrasilBrasilBrasilBrasilBrasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – Sem CEP - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'CEP' é obrigatório.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCepRequerid\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5011234678\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa – CEP com letras - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: O campo 'CEP' só pode conter números\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCepLetras\")).to.eql(JSON.parse(responseBody).error[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"abcdefgh\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"5078945612\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "cadastro de empresa - Sem Token - 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: No token provided.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgTokenRequerid\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function firstnameCompany() {\r",
											"    const names = ['Algar ', 'Apple', 'sony', 'google', 'atlas', 'havaia', 'vale', 'Hiato', 'Luppan', 'Drogasil', 'Islla', 'Lorenzony', 'Mantu', 'Th', 'Luzzia', 'Pedras', 'Gio', 'Gabb', 'Jullius', 'JJ', 'Alpes', 'Krok', 'Vodafone', 'Meo', 'Nos', 'WTF', 'JFK'];\r",
											"   \r",
											"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
											"    return randomName\r",
											"}\r",
											"pm.environment.set(\"FirstNamecompany\", firstnameCompany())\r",
											" \r",
											"function lastnameCompany() {\r",
											"    const lastnames = ['Inteligency', 'saúde', 'agro', 'tech', 'tecnology', 'transportes', 'reparadora', 'bio ', 'comércio', 'varejo', 'construções', 'ltda', 'longa', 'bad', 'estetica', 'educação', 'telefonia', 'logistica', 'retalho'];\r",
											" \r",
											"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
											"    return randomLastName\r",
											"}\r",
											"pm.environment.set(\"LastNamecompany\", lastnameCompany())\r",
											" \r",
											"pm.environment.set(\"nomedaempresa\",\r",
											"    pm.environment.get(\"FirstNamecompany\") + \" \" + pm.environment.get(\"LastNamecompany\"))\r",
											" \r",
											"pm.environment.set(\"mailUsercompany\", pm.environment.get(\"nomedaempresa\").toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") + '@qacoders.com.br')\r",
											" \r",
											"function generatePassword() {\r",
											"    const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%\";\r",
											"    const comprimentoMinimo = 8;\r",
											"    const comprimentoMaximo = 12;\r",
											"    let senhaArray = [];\r",
											" \r",
											"    senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
											"    senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
											"    senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
											"   \r",
											"    const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
											"   \r",
											"    for (let i = 0; i < comprimentoRestante; i++) {\r",
											"        senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
											"    }\r",
											"    return shuffleString(senhaArray.join(\"\"));\r",
											"}\r",
											" \r",
											"function shuffleString(string) {\r",
											"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
											"}\r",
											"pm.environment.set(\"passUsercompany\", generatePassword());\r",
											" \r",
											" \r",
											"function gerarCNPJ() {\r",
											"    const n = Array.from({ length: 8 }, () => Math.floor(Math.random() * 10)).join('');\r",
											"    const cnpjBase = n + '0001';\r",
											" \r",
											"    const d1 = cnpjBase.split('').reduce((acc, num, i) => acc + parseInt(num) * [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito1 = d1 < 2 ? 0 : 11 - d1;\r",
											" \r",
											"    const d2 = (cnpjBase + digito1).split('').reduce((acc, num, i) => acc + parseInt(num) * [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2][i], 0) % 11;\r",
											"    const digito2 = d2 < 2 ? 0 : 11 - d2;\r",
											" \r",
											"    return cnpjBase + digito1 + digito2;\r",
											"}\r",
											" \r",
											"let novoCNPJ = gerarCNPJ();\r",
											"pm.environment.set(\"cnpj\", novoCNPJ);\r",
											"console.log(\"Novo CNPJ gerado:\", novoCNPJ);\r",
											" \r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "",
											"type": "string"
										},
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"corporateName\": \"{{nomedaempresa}}\",\r\n  \"registerCompany\": \"{{cnpj}}\",\r\n  \"mail\": \"empresadetest@test.com\",\r\n  \"matriz\": \"Teste\",\r\n  \"responsibleContact\": \"Marcio Pedro\",\r\n  \"telephone\": \"99997895419999\",\r\n  \"serviceDescription\": \"Testes\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"04777001\",\r\n      \"city\": \"São Paulo\",\r\n      \"state\": \"SP\",\r\n      \"district\": \"Rua das Flores\",\r\n      \"street\": \"Avenida Interlagos\",\r\n      \"number\": \"50\",\r\n      \"complement\": \"de 4503 ao fim - lado ímpar\",\r\n      \"country\": \"Brasil\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Consultar empresa por ID",
					"item": [
						{
							"name": "Consultar Empresa por ID - 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/{{CompanyuserId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										"{{CompanyuserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultar Empresa por ID - Erro servidor - 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Erro Interno do Servidor\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/67b35286b94dd4b9b9a16",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										"67b35286b94dd4b9b9a16"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultar Empresa por ID - Sem token - 403",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Check msg: No token provided.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgTokenRequerid\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/{{CompanyuserId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										"{{CompanyuserId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Consultar Empresa por ID - companhia inexistente - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check msg: Essa companhia não existe em nosso sistema.\", function () {\r",
											"    pm.expect(pm.globals.get(\"MsgCIAInexistente\")).to.eql(JSON.parse(responseBody).alert[0]);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"followRedirects": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{tokenUsers}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "query",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/company/67f7d3db360a6bf52db12773",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"company",
										"67f7d3db360a6bf52db12773"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Diretoria",
			"item": [
				{
					"name": "Criação Diretoria - 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: Empresa Cadastrada com Sucesso\", function () {\r",
									"  pm.expect(pm.globals.get(\"Empresa Cadastrada com Sucesso.\", pm.response.json()));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function boardName() {\r",
									"\r",
									"    let boardName = [\"Recursos Humanos\", \"Financeiro\", \"Contabilidade\", \"Marketing\", \"Vendas\", \"Comercial\", \"Jurídico\", \"Tecnologia Informação\", \"Logística\", \"Compras\", \"Produção\", \"Operações\", \"Pesquisa Desenvolvimento\", \"Atendimento Cliente\", \"Comunicação Corporativa\", \"Qualidade\", \"Planejamento Estratégico\", \"Suporte\"]\r",
									"\r",
									"    let randomItem = boardName[Math.floor(Math.random() * boardName.length)]; return randomItem;\r",
									"}\r",
									"\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}').replace(/-/g, '') // Remove hifens\r",
									"    .replace(/[0-9]/g, '');  // Remove números\r",
									"    }\r",
									"    const name = boardName();\r",
									"    const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									"    pm.environment.set(\"BoardName\", name); pm.environment.set(\"BoardNameComplete\", name + guid)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"{{BoardNameComplete}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação Diretoria - Solicitação Inválida - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function boardName() {\r",
									"\r",
									"    let boardName = [\"Recursos Humanos\", \"Financeiro\", \"Contabilidade\", \"Marketing\", \"Vendas\", \"Comercial\", \"Jurídico\", \"Tecnologia da Informação\", \"Logística\", \"Compras\", \"Produção\", \"Operações\", \"Pesquisa e Desenvolvimento\", \"Atendimento ao Cliente\", \"Comunicação Corporativa\", \"Qualidade\", \"Planejamento Estratégico\", \"Suporte\"]\r",
									"\r",
									"    let randomItem = boardName[Math.floor(Math.random() * boardName.length)]; return randomItem;\r",
									"}\r",
									"\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}').replace(/-/g, '') // Remove hifens\r",
									"    .replace(/[0-9]/g, '');  // Remove números\r",
									"    }\r",
									"    const name = boardName();\r",
									"    const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									"    pm.environment.set(\"BoardName\", name); pm.environment.set(\"BoardNameComplete\", name + guid)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"{{BoardName\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação Diretoria -  Sem token - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: No token provided.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenRequerid\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function boardName() {\r",
									"\r",
									"    let boardName = [\"Recursos Humanos\", \"Financeiro\", \"Contabilidade\", \"Marketing\", \"Vendas\", \"Comercial\", \"Jurídico\", \"Tecnologia da Informação\", \"Logística\", \"Compras\", \"Produção\", \"Operações\", \"Pesquisa e Desenvolvimento\", \"Atendimento ao Cliente\", \"Comunicação Corporativa\", \"Qualidade\", \"Planejamento Estratégico\", \"Suporte\"]\r",
									"\r",
									"    let randomItem = boardName[Math.floor(Math.random() * boardName.length)]; return randomItem;\r",
									"}\r",
									"\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}').replace(/-/g, '') // Remove hifens\r",
									"    .replace(/[0-9]/g, '');  // Remove números\r",
									"    }\r",
									"    const name = boardName();\r",
									"    const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									"    pm.environment.set(\"BoardName\", name); pm.environment.set(\"BoardNameComplete\", name + guid)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"{{BoardNameComplete}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Criação Diretoria - Conflito - 409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: Não é possível salvar esse registro. Diretoria já cadastrada no sistema.\", function () {\r",
									"    pm.expect(pm.globals.get(\"DiretoriaCadastrada\")).to.eql(JSON.parse(responseBody).alert[0]);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"boardName\": \"Tecnologia da Informaçãodaeffeaf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/board/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Diretoria Count - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/board/count",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Diretoria ID - Sucesso - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/board/{{BoardId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								"{{BoardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Diretoria ID - Erro servidor - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/board/67b35286b94dd4b9b9a16",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								"67b35286b94dd4b9b9a16"
							]
						}
					},
					"response": []
				},
				{
					"name": "Diretoria ID - Sem token - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: No token provided.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenRequerid\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/board/{{BoardId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"board",
								"{{BoardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Diretoria ID - \t Não Encontrado - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response body check\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/bard/{{BoardId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"bard",
								"{{BoardId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Centro de Custo",
			"item": [
				{
					"name": "Criação Centro de Custo - 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.environment.set(\"CostCenterId\", JSON.parse(responseBody).newCostCenter._id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function costCenterName() {\r",
									"\r",
									"    let costCenterName = [\"Recursos Humanos\", \"Financeiro\", \"Contabilidade\", \"Marketing\", \"Vendas\", \"Comercial\", \"Jurídico\", \"Tecnologia Informação\", \"Logística\", \"Compras\", \"Produção\", \"Operações\", \"Pesquisa Desenvolvimento\", \"Atendimento Cliente\", \"Comunicação Corporativa\", \"Qualidade\", \"Planejamento Estratégico\", \"Suporte\"]\r",
									"\r",
									"    let randomItem = costCenterName[Math.floor(Math.random() * costCenterName.length)]; return randomItem;\r",
									"}\r",
									"\r",
									"function cleanGuid() {\r",
									"    return pm.variables.replaceIn('{{$guid}}').replace(/-/g, '') // Remove hifens\r",
									"    .replace(/[0-9]/g, '');  // Remove números\r",
									"    }\r",
									"    const name = costCenterName();\r",
									"    const guid = cleanGuid().substring(0, 8); // Pega apenas os primeiros 8 caracteres\r",
									"    pm.environment.set(\"CostCenterName\", name); pm.environment.set(\"CostCenterNameComplete\", name + guid)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"costCenterName\": \"{{CostCenterNameComplete}}\",\r\n  \"boardId\": \"{{BoardId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo -  200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/costCenter",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Count Sucesso - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/costCenter/count",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro Custo  ID- 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/costCenter/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Status Inativado Sucesso - 202",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202 or 208\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([202, 208]);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: Centro de custos inativado com sucesso!\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgCostCenterInativado\")).to.eql(JSON.parse(responseBody).msg);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let currentStatus = pm.environment.get(\"currentStatus\");\r",
									"\r",
									"if (typeof currentStatus === \"string\") {\r",
									"    currentStatus = currentStatus.toLowerCase() === \"true\";\r",
									"}\r",
									"\r",
									"const newStatus = !currentStatus;\r",
									"pm.environment.set(\"newStatus\", newStatus);\r",
									"\r",
									"console.log(\"Trocando status de\", currentStatus, \"para\", newStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Status Já Inativado - 208",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									"pm.test(\"Check msg: Esse centro de custo já se encontra inativado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"JaInativadoCC\")).to.eql(JSON.parse(responseBody).msg);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Atualização Status - 202",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202 or 208\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([202, 208]);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: Centro de custos inativado com sucesso!\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgCostCenterInativado\")).to.eql(JSON.parse(responseBody).msg);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let currentStatus = pm.environment.get(\"currentStatus\");\r",
									"\r",
									"if (typeof currentStatus === \"string\") {\r",
									"    currentStatus = currentStatus.toLowerCase() === \"true\";\r",
									"}\r",
									"\r",
									"const newStatus = !currentStatus;\r",
									"pm.environment.set(\"newStatus\", newStatus);\r",
									"\r",
									"console.log(\"Trocando status de\", currentStatus, \"para\", newStatus);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Status Já Ativado - 208",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									"pm.test(\"Check msg: Esse centro de custo já se encontra ativado.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgCostCenterAtivado\")).to.eql(JSON.parse(responseBody).msg);\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Erro Servidor - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Erro Interno do Servidor\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cast to ObjectId failed for value\");\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Solicitação Incorreta - 400",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": null",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Sem  token - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: No token provided.\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgTokenRequerid\")).to.eql(JSON.parse(responseBody).errors[0]);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/{{CostCenterId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"{{CostCenterId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Centro de Custo - Não encontrado - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Check msg: Não foi possível encontrar a centro de custos com o id especificado\", function () {\r",
									"    pm.expect(pm.globals.get(\"MsgNotFound\")).to.eql(JSON.parse(responseBody).msg);\r",
									"})\r",
									" \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{tokenUsers}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "query",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/costCenter/status/67b36cd6b94dd4b9b9a1c9a3",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"costCenter",
								"status",
								"67b36cd6b94dd4b9b9a1c9a3"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}